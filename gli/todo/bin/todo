#!/usr/bin/env ruby


$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'gli'
require 'todo/version'

include GLI::App

desc "Path to the todo file"
# arg_name "todo_file"
# default_value "#{ENV['HOME']}/.todo.txt"
desc 'Path to the todo file'
# flag [:f,:filename]

version Todo::VERSION

flag :f

desc 'Create a new task in the task list'
long_desc "
A task has a name and a priority. By default, new
tasks have the lowest possible priority, though
this can be overridden.
"
arg_name 'task name for new todo'
command :new do |c|
  c.flag :priority
  c.switch :f

  c.action do |global_options,options,args|
    puts "Global:"
    puts "-f - #{global_options[:f]}"
    puts "Command:"
    puts "-f - #{options[:f] ? 'true' : 'false'}"
    puts "--priority - #{options[:priority]}"
    puts "args - #{args.join(',')}"
  end
end

desc 'lists all the tasks'
# command :list do |c|
#   c.flag :s
#   c.action do |global_options,options,args|
#     puts "Global:"
#     puts "-f - #{global_options[:f]}"
#     puts "Command:"
#     puts "-s - #{options[:s]}"
#   end
# end
command :list do |c|

  c.desc 'Format of the output'
  c.arg_name 'csv|pretty'
  c.default_value 'pretty'
  c.flag :format
  c.desc 'Auto-detect format based on TTY'
  c.switch 'auto-detect'

  c.action do |global_options,options,args|
    puts "Global:"
    puts "-f - #{global_options[:f]}"
    puts "Command:"
    puts "-s - #{options[:s]}"
    if options[:'auto-detect']
      if STDOUT.tty?
        options[:format] = 'pretty'
      else
        options[:format] = 'csv'
      end
    end
    File.open(global_options[:filename]) do |file|
      index = 1
      file.readlines.each do |todo|
        name,created,completed = todo.chomp.split(/,/)
    if options[:format] == 'pretty'
      # Use the pretty-print format
          printf("%2d - %s\n",index,name)
          printf("     %-10s %s\n","Created:",created)
          printf("     %-10s %s\n","Completed:",completed) if completed
    elsif options[:format] == 'csv'
      # Use the machine-readable CSV format
          complete_flag = completed ? "C" : "U"
          printf("%d,%s,%s,%s,%s\n",index,name,complete_flag,created,completed)
    end
        index += 1
      end
    end
  end
end

desc 'Complete a task'
command :done do |c|
  c.action do |global_options,options,args|
    puts "Global:"
    puts "-f - #{global_options[:f]}"
  end
end

exit run(ARGV)
